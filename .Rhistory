data_f <- data_f %>%
mutate(
CONSUMO = as.numeric(gsub(",", ".", CONSUMO)),
ID = as.character(ID),
`ID Unico` = as.character(`ID Unico`)
)
# Informe: calcular diferencia de filas entre el dataset original y el limpio
data_original <- read.csv("./dataset/data_f.csv",
stringsAsFactors = FALSE,
check.names = FALSE,
row.names = NULL,
sep = ";")
diferencia_filas <- nrow(data_original) - nrow(data_f)
cat("Cantidad de filas eliminadas: ", diferencia_filas, "\n")
cat("Cantidad de datos ajustados: ", nrow(data_f) * 3, "\n")
rm(data_original)
# ================================
# 2. Tablas de información y tipos de datos
# ================================
# Tabla: Unidades de cada concepto
concepto <- c("A. COMPRIMIDO", "AGUA", "CDD", "Delta P", "Energía Eléctrica",
"Energía Refrigeración", "GAS", "HDD", "Running Time", "VACIO", "VAPOR")
# ================================
# 1. Importación y limpieza de datos
# ================================
# Cargar librerías necesarias
library(dplyr)
library(knitr)
# Importar el dataset (usar la ruta correcta)
data_f <- read.csv("./dataset/data_f.csv",
stringsAsFactors = FALSE,
check.names = FALSE,
row.names = NULL,
sep = ";")
# Eliminar filas donde "FECHA INICIO" es NA o cadena vacía
data_f <- data_f %>%
filter(!(is.na(`FECHA INICIO`) | `FECHA INICIO` == ""))
# Eliminar filas donde "CONSUMO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONSUMO) & CONSUMO != "")
# Eliminar filas donde "CONCEPTO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONCEPTO) & CONCEPTO != "")
# Convertir formato numérico en "CONSUMO" (cambiar comas por puntos) y ajustar tipos de "ID" e "ID Unico"
data_f <- data_f %>%
mutate(
CONSUMO = as.numeric(gsub(",", ".", CONSUMO)),
ID = as.character(ID),
`ID Unico` = as.character(`ID Unico`)
)
# Informe: calcular diferencia de filas entre el dataset original y el limpio
data_original <- read.csv("./dataset/data_f.csv",
stringsAsFactors = FALSE,
check.names = FALSE,
row.names = NULL,
sep = ";")
diferencia_filas <- nrow(data_original) - nrow(data_f)
cat("Cantidad de filas eliminadas: ", diferencia_filas, "\n")
cat("Cantidad de datos ajustados: ", nrow(data_f) * 3, "\n")
rm(data_original)
# ================================
# 2. Tablas de información y tipos de datos
# ================================
# Tabla: Unidades de cada concepto
concepto <- c("aire comprimido", "agua", "CDD", "Delta P", "Energia electrica",
"energia refrigeracion", "GAS", "HDD", "Running Time", "VACIO", "VAPOR")
concepto <- enc2utf8(concepto)
unidades <- c("[m3]", "[m3]", "[°C]", "[inHg] [mBAR]", "[kWh]", "[TNh]", "[m3]",
"[°C]", "[hrs]", "[m3]", "[kg] [Tn]")
kable(tabla_unidades, caption = "Tabla de unidades de cada concepto")
# ================================
# 1. Importación y limpieza de datos
# ================================
# Cargar librerías necesarias
library(dplyr)
library(knitr)
# Importar el dataset (usar la ruta correcta)
data_f <- read.csv("./dataset/data_f.csv",
stringsAsFactors = FALSE,
check.names = FALSE,
row.names = NULL,
sep = ";")
# Eliminar filas donde "FECHA INICIO" es NA o cadena vacía
data_f <- data_f %>%
filter(!(is.na(`FECHA INICIO`) | `FECHA INICIO` == ""))
# Eliminar filas donde "CONSUMO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONSUMO) & CONSUMO != "")
# Eliminar filas donde "CONCEPTO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONCEPTO) & CONCEPTO != "")
# Convertir formato numérico en "CONSUMO" (cambiar comas por puntos) y ajustar tipos de "ID" e "ID Unico"
data_f <- data_f %>%
mutate(
CONSUMO = as.numeric(gsub(",", ".", CONSUMO)),
ID = as.character(ID),
`ID Unico` = as.character(`ID Unico`)
)
# Informe: calcular diferencia de filas entre el dataset original y el limpio
data_original <- read.csv("./dataset/data_f.csv",
stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
diferencia_filas <- nrow(data_original) - nrow(data_f)
cat("Cantidad de filas eliminadas: ", diferencia_filas, "\n")
cat("Cantidad de datos ajustados: ", nrow(data_f) * 3, "\n")
rm(data_original, diferencia_filas)
# ================================
# 2. Tablas de información y tipos de datos
# ================================
# Tabla: Unidades de cada concepto
concepto <- c("aire comprimido", "agua", "CDD", "Delta P", "Energia electrica",
"energia refrigeracion", "GAS", "HDD", "Running Time", "VACIO", "VAPOR")
unidades <- c("[m3]", "[m3]", "[°C]", "[inHg] [mBAR]", "[kWh]", "[TNh]", "[m3]",
"[°C]", "[hrs]", "[m3]", "[kg] [Tn]")
tabla_unidades <- data.frame(concepto, unidades)
kable(tabla_unidades, caption = "Tabla de unidades de cada concepto")
# ================================
# 1. Importación y limpieza de datos
# ================================
# Cargar librerías necesarias
library(dplyr)
# Importar el dataset (usar la ruta correcta)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Eliminar filas donde "FECHA INICIO" es NA o cadena vacía
data_f <- data_f %>%
filter(!(is.na(`FECHA INICIO`) | `FECHA INICIO` == ""))
# Eliminar filas donde "CONSUMO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONSUMO) & CONSUMO != "")
# Eliminar filas donde "CONCEPTO" es NA o cadena vacía
data_f <- data_f %>%
filter(!is.na(CONCEPTO) & CONCEPTO != "")
# Convertir formato numérico en "CONSUMO" (cambiar comas por puntos) y ajustar tipos de "ID" e "ID Unico"
data_f <- data_f %>%
mutate(
CONSUMO = as.numeric(gsub(",", ".", CONSUMO)),
ID = as.character(ID),
`ID Unico` = as.character(`ID Unico`)
)
# Informe: calcular diferencia de filas entre el dataset original y el limpio
data_original <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
diferencia_filas <- nrow(data_original) - nrow(data_f)
cat("Cantidad de filas eliminadas: ", diferencia_filas, "\n")
cat("Cantidad de datos ajustados: ", nrow(data_f) * 3, "\n")
rm(data_original, diferencia_filas)
# ================================
# 2. Tablas de información y tipos de datos
# ================================
# Tabla: Unidades de cada concepto
concepto <- c("aire comprimido", "agua", "CDD", "Delta P", "Energia electrica",
"energia refrigeracion", "GAS", "HDD", "Running Time", "VACIO", "VAPOR")
unidades <- c("[m3]", "[m3]", "[°C]", "[inHg] [mBAR]", "[kWh]", "[TNh]", "[m3]",
"[°C]", "[hrs]", "[m3]", "[kg] [Tn]")
tabla_unidades <- data.frame(concepto, unidades)
print("Tabla de unidades de cada concepto:")
print(tabla_unidades)
# Tabla: Variables y tipos de datos
variables <- c("FECHA INICIO", "FECHA TERMINO", "CONCEPTO", "LINE", "KEY Equipment",
"UNIDAD", "CONSUMO", "ID", "ID Unico", "ID FABRICACION")
tipos <- c("continua", "continua", "nominal", "nominal", "nominal", "nominal",
"Continua", "Discreta", "Discreta", "nominal")
tabla_variables <- data.frame(variables, tipos)
print("\nTabla de variables y tipos de datos:")
print(tabla_variables)
# ================================
# 3. Cálculos estadísticos por concepto
# ================================
# 3.1. Media de consumo por Concepto
media_data  <- aggregate(CONSUMO ~ CONCEPTO, data = data_f, FUN = mean)
print("\nMedia de consumo por Concepto:")
print(media_data)
# 3.2. Mediana de consumo por Concepto
mediana_data <- aggregate(CONSUMO ~ CONCEPTO, data = data_f, FUN = median)
print("\nMediana de consumo por Concepto:")
print(mediana_data)
# 3.3. Moda de consumo por Concepto
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
moda_data <- aggregate(CONSUMO ~ CONCEPTO, data = data_f, FUN = getmode)
print("\nModa de consumo por Concepto:")
print(moda_data)
# 3.4. Desviación estándar de consumo por Concepto
sd_data  <- aggregate(CONSUMO ~ CONCEPTO, data = data_f, FUN = sd)
print("\nDesviación estándar de consumo por Concepto:")
print(sd_data)
# 3.5. Coeficiente de variación de consumo por Concepto
cv_data <- aggregate(CONSUMO ~ CONCEPTO, data = data_f, FUN = function(x) sd(x) / mean(x))
print("\nCoeficiente de variación de consumo por Concepto:")
print(cv_data)
# ================================
# 4. Resumen estadístico global por concepto
# ================================
tabla_resumen <- merge(mediana_data, media_data, by = "CONCEPTO", suffixes = c(".mediana", ".media")) %>%
merge(moda_data, by = "CONCEPTO") %>%
merge(sd_data, by = "CONCEPTO", suffixes = c("", ".sd")) %>%
merge(cv_data, by = "CONCEPTO", suffixes = c("", ".cv")) %>%
rename(Mediana = CONSUMO.mediana,
Media = CONSUMO.media,
Moda = CONSUMO,
SD = CONSUMO.sd,
CV = CONSUMO.cv)
print("\nResumen estadístico de consumo por concepto:")
print(tabla_resumen)
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar el dataset
data_f <- read.csv("./../dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
getwd()
ls
clearPushBack()
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar el dataset
data_f <- read.csv("../dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar el dataset
data_f <- read.csv("../dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Cargar el dataset
data_f <- read.csv("./../dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar el dataset
data_f <- read.csv("./../dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
# Cargar el dataset
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# Convertir la columna "CONSUMO" en numérica (removiendo comas y cambiando a punto decimal si es necesario)
data_f$CONSUMO <- as.numeric(gsub(",", ".", data_f$CONSUMO))
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>% filter(CONCEPTO %in% recursos_principales)
# Crear el histograma con densidad
ggplot(datos_principales, aes(x = CONSUMO, fill = CONCEPTO)) +
geom_histogram(aes(y = ..density..), bins = 50, color = "black", alpha = 0.4, position = "identity") +
geom_density(alpha = 0.3) +
facet_wrap(~CONCEPTO, scales = "free") +  # Crea subgráficos por concepto
scale_fill_manual(values = c("blue", "green", "red")) +  # Colores para cada recurso
geom_vline(aes(xintercept = median(CONSUMO, na.rm = TRUE)),
color = "blue", linetype = "dashed", size = 1) +  # Línea punteada en la mediana
labs(title = "Histograma con Densidad por Tipo de Consumo",
x = "Consumo",
y = "Densidad",
fill = "CONCEPTO") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))  # Personaliza los títulos de los subgráficos
install.packages("ggplot2")
View(tabla_unidades)
library(dplyr)
library(lubridate)
install.packages("dplyr")
library(dplyr)
library(lubridate)
install.packages("lubridate")
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, ...)
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeric(gsub(",", ".", datos_principales$CONSUMO))
# Extraer el mes de FECHA TERMINO
# 'label = TRUE' crea etiquetas de mes (ej: "Ene", "Feb", etc.)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por CONCEPTO y MES, y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(CONCEPTO, MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
facet_wrap(~ CONCEPTO, scales = "free_x") +  # Un panel por cada recurso
labs(title = "Consumo Mensual Promedio por Recurso",
x = "Mes",
y = "Consumo Promedio") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeric(gsub(",", ".", datos_principales$CONSUMO))
# Extraer el mes de FECHA TERMINO
# 'label = TRUE' crea etiquetas de mes (ej: "Ene", "Feb", etc.)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por CONCEPTO y MES, y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(CONCEPTO, MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
facet_wrap(~ CONCEPTO, ncol = 1, scales = "free_x") +  # <-- Cambiar ncol a 1
labs(title = "Consumo Mensual Promedio por Recurso",
x = "Mes",
y = "Consumo Promedio") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# ================================
# 2. consumo mensual promedio por recursos
# ================================
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeriac(gsub(",", ".", datos_principales$CONSUMO))
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# ================================
# 2. consumo mensual promedio por recursos
# ================================
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeriac(gsub(",", ".", datos_principales$CONSUMO))
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# ================================
# 2. consumo mensual promedio por recursos
# ================================
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeriac(gsub(",", ".", datos_principales$CONSUMO))
library(dplyr)
library(lubridate)
library(ggplot2)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, sep = ";")
# ================================
# 2. consumo mensual promedio por recursos
# ================================
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# Extraer el mes de FECHA TERMINO
# 'label = TRUE' crea etiquetas de mes (ej: "Ene", "Feb", etc.)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por CONCEPTO y MES, y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(CONCEPTO, MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
facet_wrap(~ CONCEPTO, ncol = 1, scales = "free_x") +  # <-- Cambiar ncol a 1
labs(title = "Consumo Mensual Promedio por Recurso",
x = "Mes",
y = "Consumo Promedio") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))
library(dplyr)
library(lubridate)
library(ggplot2)
# Suponiendo que ya cargaste tu dataset en 'data_f'
# data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, ...)
# Asegúrate de que la columna FECHA TERMINO sea de tipo Date
# El formato "%d/%m/%Y" corresponde a "día/mes/año"
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeric(gsub(",", ".", datos_principales$CONSUMO))
# Extraer el mes de FECHA TERMINO
# 'label = TRUE' crea etiquetas de mes (ej: "Ene", "Feb", etc.)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por CONCEPTO y MES, y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(CONCEPTO, MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
facet_wrap(~ CONCEPTO, ncol = 1, scales = "free_x") +  # <-- Cambiar ncol a 1
labs(title = "Consumo Mensual Promedio por Recurso",
x = "Mes",
y = "Consumo Promedio") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))
library(dplyr)
library(lubridate)
library(ggplot2)
# Suponiendo que ya cargaste tu dataset en 'data_f'
# data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, ...)
# Asegúrate de que la columna FECHA TERMINO sea de tipo Date
# El formato "%d/%m/%Y" corresponde a "día/mes/año"
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Filtrar los principales recursos
recursos_principales <- c("GAS", "AGUA", "Energía Eléctrica")
datos_principales <- data_f %>%
filter(CONCEPTO %in% recursos_principales)
# (Opcional) Convertir CONSUMO a numérico si no lo has hecho antes
datos_principales$CONSUMO <- as.numeric(gsub(",", ".", datos_principales$CONSUMO))
# Extraer el mes de FECHA TERMINO
# 'label = TRUE' crea etiquetas de mes (ej: "Ene", "Feb", etc.)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por CONCEPTO y MES, y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(CONCEPTO, MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
facet_wrap(~ CONCEPTO, ncol = 1, scales = "free_x") +  # <-- Cambiar ncol a 1
labs(title = "Consumo Mensual Promedio por Recurso",
x = "Mes",
y = "Consumo Promedio") +
theme_minimal() +
theme(strip.text = element_text(face = "bold", size = 12))
# ================================
# 3. consumo mensual promedio de luz por C33
# ================================
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# Convertir la columna CONSUMO a numérico (si no lo has hecho antes)
data_f$CONSUMO <- as.numeric(gsub(",", ".", data_f$CONSUMO))
# Filtrar por concepto "Energía Eléctrica" y KEY Equipment = "C33"
datos_principales <- data_f %>%
filter(CONCEPTO == "Energía Eléctrica", `KEY Equipment` == "C33")
# Extraer el mes de FECHA TERMINO (usa etiqueta abreviada de mes)
datos_principales$MES <- month(datos_principales$`FECHA TERMINO`, label = TRUE, abbr = TRUE)
# Agrupar por MES y calcular el promedio de CONSUMO
datos_mensuales <- datos_principales %>%
group_by(MES) %>%
summarise(promedio_consumo = mean(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# Crear el gráfico de barras
ggplot(datos_mensuales, aes(x = MES, y = promedio_consumo)) +
geom_col(fill = "steelblue") +
labs(title = "Historial Mensual de Consumo de Energía Eléctrica (Equipo C33)",
x = "Mes",
y = "Consumo Promedio (unidades)") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(lubridate)
data_f <- read.csv("./dataset/data_f.csv", stringsAsFactors = FALSE, sep = ";", check.names = FALSE)
# 2) Convertir FECHA TERMINO a tipo Date, ajustando el formato de día/mes/año si es necesario
data_f$`FECHA TERMINO` <- as.Date(data_f$`FECHA TERMINO`, format = "%d/%m/%Y")
# 3) Convertir CONSUMO a numérico (si en el CSV viene con coma como separador decimal)
data_f$CONSUMO <- as.numeric(gsub(",", ".", data_f$CONSUMO))
# 4) Agrupar y resumir el consumo de GAS por FECHA TERMINO y KEY Equipment
gas_data <- data_f %>%
filter(CONCEPTO == "GAS") %>%
group_by(`FECHA TERMINO`, `KEY Equipment`) %>%
summarise(consumo_gas = sum(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# 5) Agrupar y resumir el consumo de Energía Eléctrica por FECHA TERMINO y KEY Equipment
elec_data <- data_f %>%
filter(CONCEPTO == "Energía Eléctrica") %>%
group_by(`FECHA TERMINO`, `KEY Equipment`) %>%
summarise(consumo_elec = sum(CONSUMO, na.rm = TRUE)) %>%
ungroup()
# 6) Combinar ambos data frames por FECHA TERMINO y KEY Equipment
combined_data <- left_join(gas_data, elec_data, by = c("FECHA TERMINO", "KEY Equipment"))
# 7) Calcular la correlación (opcional, pero útil)
corr_value <- cor(combined_data$consumo_gas, combined_data$consumo_elec, use = "complete.obs")
corr_value
# Imprime el valor de correlación en la consola
# 8) Crear el diagrama de dispersión con la línea de regresión
ggplot(combined_data, aes(x = consumo_gas, y = consumo_elec)) +
geom_point(color = "brown", alpha = 0.7) +  # Puntos
geom_smooth(method = "lm", color = "blue", fill = "lightblue") +  # Línea de regresión con banda de confianza
labs(title = "Correlación entre Consumo de Gas y Energía Eléctrica",
subtitle = paste("Coeficiente de correlación =", round(corr_value, 2)),
x = "Consumo de Gas (m³)",
y = "Consumo Eléctrico (kWh)") +
theme_minimal()
